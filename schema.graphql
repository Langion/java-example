input DeleteHotelParamsServiceaHotelControllerMutationInterplayInput {
  raw: Raw

  """The ID of the existing hotel resource."""
  id: Float!
}

input DeleteHotelParamsServiceaTestAControllerMutationInterplayInput {
  raw: Raw

  """The ID of the existing hotel resource."""
  id: Float!
}

input DeleteHotelParamsServicebHotelControllerMutationInterplayInput {
  raw: Raw

  """The ID of the existing hotel resource."""
  id: Float!
}

enum Direction {
  ASC
  DESC
}

input GetAllHotelQueryInput {
  raw: Raw

  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetAllHotelQueryServiceaTestAControllerInterplayInput {
  raw: Raw

  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetAllHotelQueryServicebHotelControllerInterplayInput {
  raw: Raw

  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetHotelParamsInput {
  raw: Raw

  """The ID of the hotel."""
  id: Float!
}

input GetHotelParamsServiceaTestAControllerInterplayInput {
  raw: Raw

  """The ID of the hotel."""
  id: Float!
}

input GetHotelParamsServicebHotelControllerInterplayInput {
  raw: Raw

  """The ID of the hotel."""
  id: Float!
}

input GetHotelTwoParamsInput {
  raw: Raw

  """The ID of the hotel."""
  id: Float!
}

input GetTestHotelParamsInput {
  raw: Raw

  """The ID of the hotel."""
  id: Float!
}

type HotelControllerMutationServicea {
  """
  Path: /example/v1/hotels/
  Create a hotel resource. Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelServiceaInput!): Raw

  """
  Path: /example/v1/hotels/{id}
  Delete a hotel resource. You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServiceaHotelControllerMutationInterplayInput!): Raw

  """
  Path: /example/v1/hotels/{id}
  Update a hotel resource. You have to provide a valid hotel ID in the URL and
  in the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServiceaHotelControllerMutationInterplayInput!, payload: HotelServiceaInput!): Raw
}

type HotelControllerMutationServiceb {
  """
  Path: /example/v1/hotels/
  Create a hotel resource. Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelServicebInput!): Raw

  """
  Path: /example/v1/hotels/{id}
  Delete a hotel resource. You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServicebHotelControllerMutationInterplayInput!): Raw

  """
  Path: /example/v1/hotels/{id}
  Update a hotel resource. You have to provide a valid hotel ID in the URL and
  in the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServicebHotelControllerMutationInterplayInput!, payload: HotelServicebInput!): Raw
}

type HotelControllerServicea {
  """
  Path: /example/v1/hotels/
  Get a paginated list of all hotels. The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryInput): Page_HotelServicea

  """
  Path: /example/v1/hotels/{id}
  Get a single hotel. You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsInput!): HotelServicea
}

type HotelControllerServiceb {
  """
  Path: /example/v1/hotels/
  Get a paginated list of all hotels. The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryServicebHotelControllerInterplayInput): Page_HotelServiceb

  """
  Path: /example/v1/hotels/{id}
  Get a single hotel. You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsServicebHotelControllerInterplayInput!): HotelServiceb

  """
  Path: /example/v1/hotels/two/{id}
  Get a single hotel. You have to provide a valid hotel ID.
  """
  getHotelTwo(params: GetHotelTwoParamsInput!): HotelTwo
}

""" a simple domain entity doubling as a DTO  """
type HotelServicea {
  raw: Raw
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

""" a simple domain entity doubling as a DTO  """
input HotelServiceaInput {
  raw: Raw
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

""" a simple domain entity doubling as a DTO  """
type HotelServiceb {
  raw: Raw
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

""" a simple domain entity doubling as a DTO  """
input HotelServicebInput {
  raw: Raw
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

""" a simple domain entity doubling as a DTO  """
type HotelTwo {
  raw: Raw
  one: HotelServiceb
}

type Mutation {
  ServiceaMutation: ServiceaMutation
  ServicebMutation: ServicebMutation
}

enum NullHandling {
  NATIVE
  NULLS_FIRST
  NULLS_LAST
}

"""@addedFrom servicea"""
type Order {
  raw: Raw
  ascending: Boolean
  descending: Boolean
  direction: Direction
  ignoreCase: Boolean
  nullHandling: NullHandling
  property: String
}

"""@addedFrom servicea"""
type Page_HotelServicea {
  raw: Raw
  content: [HotelServicea]
  first: Boolean
  last: Boolean
  number: Float
  numberOfElements: Float
  size: Float
  sort: Sort
  totalElements: Float
  totalPages: Float
}

"""@addedFrom servicea"""
type Page_HotelServiceb {
  raw: Raw
  content: [HotelServiceb]
  first: Boolean
  last: Boolean
  number: Float
  numberOfElements: Float
  size: Float
  sort: Sort
  totalElements: Float
  totalPages: Float
}

type Query {
  Servicea: Servicea
  Serviceb: Serviceb
}

"""Сырое значение как есть"""
scalar Raw

type Servicea {
  HotelController: HotelControllerServicea
  TestAController: TestAControllerServicea
}

type ServiceaMutation {
  HotelControllerMutation: HotelControllerMutationServicea
  TestAControllerMutation: TestAControllerMutationServicea
}

type Serviceb {
  HotelController: HotelControllerServiceb
}

type ServicebMutation {
  HotelControllerMutation: HotelControllerMutationServiceb
}

"""@addedFrom servicea"""
type Sort {
  raw: Raw
  DEFAULT_DIRECTION: Direction
  orderFor: Order
}

type TestAControllerMutationServicea {
  """
  Path: /example/v1/a/test/
  Create a hotel resource. Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelServiceaInput!): Raw

  """
  Path: /example/v1/a/test/{id}
  Delete a hotel resource. You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServiceaTestAControllerMutationInterplayInput!): Raw

  """
  Path: /example/v1/a/test/{id}
  Update a hotel resource. You have to provide a valid hotel ID in the URL and
  in the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServiceaTestAControllerMutationInterplayInput!, payload: HotelServiceaInput!): Raw

  """
  Path: /example/v1/a/test/{id}/{one}
  Update a hotel resource. You have to provide a valid hotel ID in the URL and
  in the payload. The ID attribute can not be updated.
  """
  updateHotel2(params: UpdateHotel2ParamsServiceaTestAControllerMutationInterplayInput!, payload: HotelServiceaInput!): Raw
}

type TestAControllerServicea {
  """
  Path: /example/v1/a/test/
  Get a paginated list of all hotels. The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryServiceaTestAControllerInterplayInput): Page_HotelServicea

  """
  Path: /example/v1/a/test/{id}
  Get a single hotel. You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsServiceaTestAControllerInterplayInput!): HotelServicea

  """
  Path: /example/v1/a/test/test/{id}
  Get a single hotel. You have to provide a valid hotel ID.
  """
  getTestHotel(params: GetTestHotelParamsInput!): TestAHotel
}

""" a simple domain entity doubling as a DTO  """
type TestAHotel {
  raw: Raw
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

input UpdateHotel2ParamsServiceaTestAControllerMutationInterplayInput {
  raw: Raw

  """Some one"""
  one: Float!

  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServiceaHotelControllerMutationInterplayInput {
  raw: Raw

  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServiceaTestAControllerMutationInterplayInput {
  raw: Raw

  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServicebHotelControllerMutationInterplayInput {
  raw: Raw

  """The ID of the existing hotel resource."""
  id: Float!
}
