"""Любое значение которое не получилось сериализовать"""
scalar Any

input DeleteHotelParamsServiceaHotelControllerMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input DeleteHotelParamsServiceaTestAControllerMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input DeleteHotelParamsServicebHotelControllerMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

enum Direction {
  ASC
  DESC
}

input GetAllHotelQueryInput {
  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetAllHotelQueryServiceaTestAControllerInterplayInput {
  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetAllHotelQueryServicebHotelControllerInterplayInput {
  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetHotelParamsInput {
  """The ID of the hotel."""
  id: Float!
}

input GetHotelParamsServiceaTestAControllerInterplayInput {
  """The ID of the hotel."""
  id: Float!
}

input GetHotelParamsServicebHotelControllerInterplayInput {
  """The ID of the hotel."""
  id: Float!
}

input GetHotelTwoParamsInput {
  """The ID of the hotel."""
  id: Float!
}

input GetTestHotelParamsInput {
  """The ID of the hotel."""
  id: Float!
}

"""a simple domain entity doubling as a DTO"""
type Hotel {
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

type HotelControllerMutationServicea {
  """
  Path: /example/v1/hotels/
  Create a hotel resource.Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Delete a hotel resource.You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServiceaHotelControllerMutationInterplayInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServiceaHotelControllerMutationInterplayInput!, payload: HotelInput!): Any
}

type HotelControllerMutationServiceb {
  """
  Path: /example/v1/hotels/
  Create a hotel resource.Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Delete a hotel resource.You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServicebHotelControllerMutationInterplayInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServicebHotelControllerMutationInterplayInput!, payload: HotelInput!): Any
}

type HotelControllerServicea {
  """
  Path: /example/v1/hotels/
  Get a paginated list of all hotels.The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryInput): Page_Hotel

  """
  Path: /example/v1/hotels/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsInput!): Hotel
}

type HotelControllerServiceb {
  """
  Path: /example/v1/hotels/
  Get a paginated list of all hotels.The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryServicebHotelControllerInterplayInput): Page_Hotel

  """
  Path: /example/v1/hotels/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsServicebHotelControllerInterplayInput!): Hotel

  """
  Path: /example/v1/hotels/two/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotelTwo(params: GetHotelTwoParamsInput!): HotelTwo
}

"""a simple domain entity doubling as a DTO"""
input HotelInput {
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

"""a simple domain entity doubling as a DTO"""
type HotelTwo {
  one: Hotel
}

type Mutation {
  ServiceaMutation: ServiceaMutation
  ServicebMutation: ServicebMutation
}

enum NullHandling {
  NATIVE
  NULLS_FIRST
  NULLS_LAST
}

type Order {
  ascending: Boolean
  descending: Boolean
  direction: Direction
  ignoreCase: Boolean
  nullHandling: NullHandling
  property: String
}

type Page_Hotel {
  content: [Hotel]
  first: Boolean
  last: Boolean
  number: Float
  numberOfElements: Float
  size: Float
  sort: Sort
  totalElements: Float
  totalPages: Float
}

type Query {
  Servicea: Servicea
  Serviceb: Serviceb
}

type Servicea {
  HotelController: HotelControllerServicea
  TestAController: TestAControllerServicea
}

type ServiceaMutation {
  HotelControllerMutation: HotelControllerMutationServicea
  TestAControllerMutation: TestAControllerMutationServicea
}

type Serviceb {
  HotelController: HotelControllerServiceb
}

type ServicebMutation {
  HotelControllerMutation: HotelControllerMutationServiceb
}

type Sort {
  DEFAULT_DIRECTION: Direction
  orderFor: Order
}

type TestAControllerMutationServicea {
  """
  Path: /example/v1/a/test/
  Create a hotel resource.Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelInput!): Any

  """
  Path: /example/v1/a/test/{id}
  Delete a hotel resource.You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServiceaTestAControllerMutationInterplayInput!): Any

  """
  Path: /example/v1/a/test/{id}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServiceaTestAControllerMutationInterplayInput!, payload: HotelInput!): Any

  """
  Path: /example/v1/a/test/{id}/{one}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel2(params: UpdateHotel2ParamsServiceaTestAControllerMutationInterplayInput!, payload: HotelInput!): Any
}

type TestAControllerServicea {
  """
  Path: /example/v1/a/test/
  Get a paginated list of all hotels.The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryServiceaTestAControllerInterplayInput): Page_Hotel

  """
  Path: /example/v1/a/test/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsServiceaTestAControllerInterplayInput!): Hotel

  """
  Path: /example/v1/a/test/test/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getTestHotel(params: GetTestHotelParamsInput!): TestAHotel
}

"""a simple domain entity doubling as a DTO"""
type TestAHotel {
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

input UpdateHotel2ParamsServiceaTestAControllerMutationInterplayInput {
  """Some one"""
  one: Float!

  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServiceaHotelControllerMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServiceaTestAControllerMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServicebHotelControllerMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}
