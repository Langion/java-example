"""Любое значение которое не получилось сериализовать"""
scalar Any

input DeleteHotelParamsServiceaHotelMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input DeleteHotelParamsServiceaTestAMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input DeleteHotelParamsServicebHotelMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

enum Direction {
  ASC
  DESC
}

input GetAllHotelQueryInput {
  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetAllHotelQueryServiceaTestAInterplayInput {
  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetAllHotelQueryServicebHotelInterplayInput {
  """Tha page size"""
  size: Float!

  """The page number (zero-based)"""
  page: Float!
}

input GetHotelParamsInput {
  """The ID of the hotel."""
  id: Float!
}

input GetHotelParamsServiceaTestAInterplayInput {
  """The ID of the hotel."""
  id: Float!
}

input GetHotelParamsServicebHotelInterplayInput {
  """The ID of the hotel."""
  id: Float!
}

input GetHotelTwoParamsInput {
  """The ID of the hotel."""
  id: Float!
}

input GetTestHotelParamsInput {
  """The ID of the hotel."""
  id: Float!
}

type HotelMutationServicea {
  """
  Path: /example/v1/hotels/
  Create a hotel resource.Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelSharedInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Delete a hotel resource.You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServiceaHotelMutationInterplayInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServiceaHotelMutationInterplayInput!, payload: HotelSharedInput!): Any
}

type HotelMutationServiceb {
  """
  Path: /example/v1/hotels/
  Create a hotel resource.Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelSharedInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Delete a hotel resource.You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServicebHotelMutationInterplayInput!): Any

  """
  Path: /example/v1/hotels/{id}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServicebHotelMutationInterplayInput!, payload: HotelSharedInput!): Any
}

type HotelServicea {
  """
  Path: /example/v1/hotels/
  Get a paginated list of all hotels.The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryInput): Page_HotelShared

  """
  Path: /example/v1/hotels/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsInput!): HotelShared
}

type HotelServiceb {
  """
  Path: /example/v1/hotels/
  Get a paginated list of all hotels.The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryServicebHotelInterplayInput): Page_HotelShared

  """
  Path: /example/v1/hotels/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsServicebHotelInterplayInput!): HotelShared

  """
  Path: /example/v1/hotels/two/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotelTwo(params: GetHotelTwoParamsInput!): HotelTwo
}

"""a simple domain entity doubling as a DTO"""
type HotelShared {
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

"""a simple domain entity doubling as a DTO"""
input HotelSharedInput {
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

"""a simple domain entity doubling as a DTO"""
type HotelTwo {
  one: HotelShared
}

type Mutation {
  ServiceaMutation: ServiceaMutation
  ServicebMutation: ServicebMutation
}

enum NullHandling {
  NATIVE
  NULLS_FIRST
  NULLS_LAST
}

type Order {
  ascending: Boolean
  descending: Boolean
  direction: Direction
  ignoreCase: Boolean
  nullHandling: NullHandling
  property: String
}

type Page_HotelShared {
  content: [HotelShared]
  first: Boolean
  last: Boolean
  number: Float
  numberOfElements: Float
  size: Float
  sort: Sort
  totalElements: Float
  totalPages: Float
}

type Query {
  Servicea: Servicea
  Serviceb: Serviceb
}

type Servicea {
  Hotel: HotelServicea
  TestA: TestAServicea
}

type ServiceaMutation {
  HotelMutation: HotelMutationServicea
  TestAMutation: TestAMutationServicea
}

type Serviceb {
  Hotel: HotelServiceb
}

type ServicebMutation {
  HotelMutation: HotelMutationServiceb
}

type Sort {
  DEFAULT_DIRECTION: Direction
  orderFor: Order
}

"""a simple domain entity doubling as a DTO"""
type TestAHotel {
  city: String
  description: String
  id: Float
  name: String
  rating: Float
}

type TestAMutationServicea {
  """
  Path: /example/v1/a/test/
  Create a hotel resource.Returns the URL of the new resource in the Location header.
  """
  createHotel(payload: HotelSharedInput!): Any

  """
  Path: /example/v1/a/test/{id}
  Delete a hotel resource.You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.
  """
  deleteHotel(params: DeleteHotelParamsServiceaTestAMutationInterplayInput!): Any

  """
  Path: /example/v1/a/test/{id}
  Update a hotel resource.You have to provide a valid hotel ID in the URL and in
  the payload. The ID attribute can not be updated.
  """
  updateHotel(params: UpdateHotelParamsServiceaTestAMutationInterplayInput!, payload: HotelSharedInput!): Any
}

type TestAServicea {
  """
  Path: /example/v1/a/test/
  Get a paginated list of all hotels.The list is paginated. You can provide a
  page number (default 0) and a page size (default 100)
  """
  getAllHotel(query: GetAllHotelQueryServiceaTestAInterplayInput): Page_HotelShared

  """
  Path: /example/v1/a/test/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getHotel(params: GetHotelParamsServiceaTestAInterplayInput!): HotelShared

  """
  Path: /example/v1/a/test/test/{id}
  Get a single hotel.You have to provide a valid hotel ID.
  """
  getTestHotel(params: GetTestHotelParamsInput!): TestAHotel
}

input UpdateHotelParamsServiceaHotelMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServiceaTestAMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}

input UpdateHotelParamsServicebHotelMutationInterplayInput {
  """The ID of the existing hotel resource."""
  id: Float!
}
